{
	"version": "1.0",
	"functions": [
		{
			"name": "get_terragrunt_dir",
			"description": "Gets the directory containing the Terragrunt configuration file.\n\n* Returns the absolute path to the directory containing the Terragrunt configuration.\n* Useful for constructing paths relative to the Terragrunt configuration file.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Absolute path to the Terragrunt configuration directory",
				"validation": {
					"pattern": "^[/\\\\].*"
				}
			},
			"examples": [
				"locals {\n  config_path = \"${get_terragrunt_dir()}/config.yaml\"\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_terraform_commands_that_need_vars",
			"description": "Gets the list of Terraform commands that accept input variables.\n\n* Returns a list of Terraform commands that can use input variables.\n* Useful for conditionally applying variable files.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of Terraform commands that accept variables",
				"validation": {
					"allowedValues": [
						"plan",
						"apply",
						"destroy",
						"refresh",
						"import",
						"console"
					]
				}
			},
			"examples": [
				"terraform {\n  extra_arguments \"common_vars\" {\n    commands = get_terraform_commands_that_need_vars()\n    arguments = [\"-var-file=common.tfvars\"]\n  }\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_terraform_commands_that_need_locking",
			"description": "Gets the list of Terraform commands that use state locking.\n\n* Returns a list of Terraform commands that use state locking.\n* Useful for managing state lock behavior.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of Terraform commands that use state locking",
				"validation": {
					"allowedValues": [
						"plan",
						"apply",
						"destroy",
						"init",
						"refresh",
						"import"
					]
				}
			},
			"examples": [
				"terraform {\n  extra_arguments \"disable_locking\" {\n    commands = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock=false\"]\n  }\n}"
			],
			"deprecated": false
		},
		{
			"name": "run_cmd",
			"description": "Executes a shell command and returns its output.\n\n* Runs the specified command and returns its stdout as a string.\n* Useful for incorporating external script outputs into your configuration.",
			"parameters": [
				{
					"name": "command",
					"types": [
						"string"
					],
					"required": true,
					"description": "Command to execute",
					"variadic": true,
					"validation": {
						"pattern": "^[^;&|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Command output"
			},
			"examples": [
				"locals {\n  git_ref = run_cmd(\"git\", \"rev-parse\", \"--short\", \"HEAD\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "sops_decrypt_file",
			"description": "Decrypts a file encrypted with SOPS.\n\n* Decrypts the specified file using SOPS and returns its contents.\n* Useful for managing encrypted configuration files.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the encrypted file",
					"validation": {
						"pattern": ".*\\.(ya?ml|json|env|ini)$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Decrypted file contents"
			},
			"examples": [
				"locals {\n  secrets = yamldecode(sops_decrypt_file(\"${get_terragrunt_dir()}/secrets.yaml\"))\n}"
			],
			"deprecated": false
		},
		{
			"name": "read_terragrunt_config",
			"description": "Reads and parses a Terragrunt configuration file.\n\n* Reads the specified Terragrunt configuration file and returns its contents.\n* Useful for sharing configuration between different Terragrunt files.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the Terragrunt configuration file",
					"validation": {
						"pattern": ".*\\.hcl$"
					}
				},
				{
					"name": "default_value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": false,
					"description": "Default value to return if the file doesn't exist"
				}
			],
			"returnType": {
				"types": [
					"object"
				],
				"description": "Parsed configuration"
			},
			"examples": [
				"locals {\n  common = read_terragrunt_config(find_in_parent_folders(\"common.hcl\"))\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_terraform_command",
			"description": "Gets the current Terraform command being executed.\n\n* Returns the name of the Terraform command that Terragrunt is running.\n* Useful for conditional logic based on the command being run.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Current Terraform command",
				"validation": {
					"allowedValues": [
						"plan",
						"apply",
						"destroy",
						"init",
						"refresh",
						"import",
						"output",
						"console",
						"fmt",
						"validate"
					]
				}
			},
			"examples": [
				"skip = get_terraform_command() == \"destroy\""
			],
			"deprecated": false
		},
		{
			"name": "get_terraform_cli_args",
			"description": "Gets the command line arguments passed to Terraform.\n\n* Returns the list of arguments that will be passed to Terraform.\n* Useful for inspecting or modifying Terraform command arguments.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Terraform command line arguments"
			},
			"examples": [
				"skip = contains(get_terraform_cli_args(), \"-destroy\")"
			],
			"deprecated": false
		},
		{
			"name": "get_env",
			"description": "Retrieves environment variables with an optional default value.\n\n* Returns the value of the environment variable or the default value if not set.\n* Useful for incorporating environment-specific values into your Terragrunt configurations.",
			"parameters": [
				{
					"name": "name",
					"types": [
						"string"
					],
					"required": true,
					"description": "The name of the environment variable to retrieve"
				},
				{
					"name": "default",
					"types": [
						"string"
					],
					"required": false,
					"description": "The default value to return if the environment variable is not set"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Value of the environment variable or default value"
			},
			"examples": [
				"inputs = {\n  api_key = get_env(\"API_KEY\", \"default-key\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_platform",
			"description": "Gets the current operating system platform.\n\n* Returns the current operating system platform (e.g., 'windows', 'darwin', 'linux').\n* Useful for platform-specific configurations.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Current operating system platform",
				"validation": {
					"allowedValues": [
						"windows",
						"darwin",
						"linux"
					]
				}
			},
			"examples": [
				"locals {\n  is_windows = get_platform() == \"windows\"\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_repo_root",
			"description": "Gets the root directory of the Git repository.\n\n* Returns the absolute path to the root of the current Git repository.\n* Useful for referencing files relative to the repository root.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Absolute path to Git repository root",
				"validation": {
					"pattern": "^[/\\\\].*"
				}
			},
			"examples": [
				"locals {\n  repo_root = get_repo_root()\n}"
			],
			"deprecated": false
		},
		{
			"name": "regex_replace",
			"description": "Performs regular expression replacement on a string.\n\n* Replaces all matches of a regular expression with a replacement string.\n* Useful for string manipulation and formatting.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "The input string to perform replacement on"
				},
				{
					"name": "pattern",
					"types": [
						"string"
					],
					"required": true,
					"description": "The regular expression pattern to match"
				},
				{
					"name": "replacement",
					"types": [
						"string"
					],
					"required": true,
					"description": "The string to replace matches with"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String with replacements applied"
			},
			"examples": [
				"locals {\n  cleaned_path = regex_replace(path_relative_to_include(), \"/\", \"-\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "yamldecode",
			"description": "Decodes a YAML string into a value.\n\n* Parses a YAML-formatted string and returns the resulting value.\n* Useful for reading YAML configuration files.",
			"parameters": [
				{
					"name": "yaml",
					"types": [
						"string"
					],
					"required": true,
					"description": "The YAML string to decode"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Decoded YAML value"
			},
			"examples": [
				"locals {\n  config = yamldecode(file(\"${get_terragrunt_dir()}/config.yaml\"))\n}"
			],
			"deprecated": false
		},
		{
			"name": "yamlencode",
			"description": "Encodes a value as a YAML string.\n\n* Converts a value into a YAML-formatted string.\n* Useful for generating YAML configuration files.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "The value to encode as YAML"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "YAML-encoded string"
			},
			"examples": [
				"generate \"config\" {\n  contents = yamlencode(local.config)\n}"
			],
			"deprecated": false
		},
		{
			"name": "jsondecode",
			"description": "Decodes a JSON string into a value.\n\n* Parses a JSON-formatted string and returns the resulting value.\n* Useful for reading JSON configuration files.",
			"parameters": [
				{
					"name": "json",
					"types": [
						"string"
					],
					"required": true,
					"description": "The JSON string to decode"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Decoded JSON value"
			},
			"examples": [
				"locals {\n  config = jsondecode(file(\"${get_terragrunt_dir()}/config.json\"))\n}"
			],
			"deprecated": false
		},
		{
			"name": "jsonencode",
			"description": "Encodes a value as a JSON string.\n\n* Converts a value into a JSON-formatted string.\n* Useful for generating JSON configuration files.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "The value to encode as JSON"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "JSON-encoded string"
			},
			"examples": [
				"generate \"config\" {\n  contents = jsonencode(local.config)\n}"
			],
			"deprecated": false
		},
		{
			"name": "read_tfvars_file",
			"description": "Reads and parses a tfvars file.\n\n* Reads the contents of a .tfvars file and returns the parsed variables.\n* Useful for incorporating existing Terraform variable files.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the .tfvars file",
					"validation": {
						"pattern": ".*\\.tfvars$"
					}
				}
			],
			"returnType": {
				"types": [
					"object"
				],
				"description": "Parsed tfvars contents"
			},
			"examples": [
				"locals {\n  env_vars = read_tfvars_file(\"${get_terragrunt_dir()}/env.tfvars\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_terraform_commands_that_need_retry",
			"description": "Gets Terraform commands that should be retried on certain errors.\n\n* Returns a list of Terraform commands that should be retried if they fail with certain errors.\n* Useful for handling transient failures.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of Terraform commands that support retry",
				"validation": {
					"allowedValues": [
						"init",
						"plan",
						"apply",
						"destroy",
						"refresh"
					]
				}
			},
			"examples": [
				"retryable_errors = [\".*Error.*\"]"
			],
			"deprecated": false
		},
		{
			"name": "get_path_from_repo_root",
			"description": "Gets the path relative to the repository root.\n\n* Returns the relative path from the repository root to the current configuration.\n* Useful for generating paths based on repository structure.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Relative path from repository root"
			},
			"examples": [
				"locals {\n  module_path = get_path_from_repo_root()\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_path_to_repo_root",
			"description": "Gets the path to the repository root.\n\n* Returns the relative path from the current configuration to the repository root.\n* Useful for referencing files at the repository root.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Relative path to repository root"
			},
			"examples": [
				"locals {\n  root_path = get_path_to_repo_root()\n}"
			],
			"deprecated": false
		},
		{
			"name": "basename",
			"description": "Gets the last element of a path.\n\n* Returns the last element of a file path or URL.\n* Useful for extracting filenames or final path components.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "The path to extract the basename from"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Last element of the path"
			},
			"examples": [
				"locals {\n  filename = basename(\"/path/to/file.txt\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "dirname",
			"description": "Gets all but the last element of a path.\n\n* Returns the directory path containing the specified path.\n* Useful for getting parent directories.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "The path to extract the directory from"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Directory containing the path"
			},
			"examples": [
				"locals {\n  parent_dir = dirname(\"/path/to/file.txt\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "merge",
			"description": "Merges multiple maps into a single map.\n\n* Combines multiple maps into a single map, with later values taking precedence.\n* Useful for combining multiple configuration objects.",
			"parameters": [
				{
					"name": "maps",
					"types": [
						"object"
					],
					"required": true,
					"description": "Two or more maps to merge",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"object"
				],
				"description": "Merged map"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "coalesce",
			"description": "Returns the first non-null value from a list of values.\n\n* Takes multiple arguments and returns the first non-null value.\n* Useful for providing fallback values.",
			"parameters": [
				{
					"name": "values",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "List of values to check",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object"
				],
				"description": "First non-null value"
			},
			"examples": [
				"locals {\n  region = coalesce(get_env(\"AWS_REGION\"), local.default_region)\n}"
			],
			"deprecated": false
		},
		{
			"name": "find_in_parent_folders",
			"description": "Searches up the directory tree from the current terragrunt.hcl file and returns the absolute path to the first file or folder with a given name.\n\n* Returns the path to the first matching file found in a parent folder.\n* If no file is found, throws an error unless a fallback is provided.\n* Can be used to find both files and folders.\n* Searches relative to the child terragrunt.hcl config when called from a parent config.",
			"parameters": [
				{
					"name": "filename",
					"types": [
						"string"
					],
					"required": false,
					"description": "Name of the file or folder to find (defaults to terragrunt.hcl)",
					"defaultValue": "terragrunt.hcl"
				},
				{
					"name": "fallback",
					"types": [
						"string"
					],
					"required": false,
					"description": "Fallback value if the file is not found"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Path to the found file/folder or fallback value"
			},
			"examples": [
				"include {\n  path = find_in_parent_folders(\"common.hcl\", \"default.hcl\")\n}"
			],
			"deprecated": false
		},
		{
			"name": "path_relative_to_include",
			"description": "Returns the relative path between the current terragrunt.hcl file and the path specified in its include block.\n\n* Returns the relative path from the including configuration to the current configuration.\n* Useful for generating unique identifiers or paths based on directory structure.\n* If multiple include blocks exist, requires a name parameter to specify which include block to base the relative path on.",
			"parameters": [
				{
					"name": "name",
					"types": [
						"string"
					],
					"required": false,
					"description": "Name of the include block to base the relative path on (required if multiple include blocks exist)"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Relative path from including configuration"
			},
			"examples": [
				"remote_state {\n  key = \"${path_relative_to_include()}/terraform.tfstate\"\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_parent_terragrunt_dir",
			"description": "Gets the directory containing the parent Terragrunt configuration file.\n\n* Returns the absolute path to the directory containing the parent Terragrunt configuration.\n* Useful for referencing files relative to the parent configuration.\n* For configurations with multiple include blocks, requires a name parameter to specify which include block to use as the parent.\n* Returns the root instead of the leaf of your terragrunt configurations.",
			"parameters": [
				{
					"name": "name",
					"types": [
						"string"
					],
					"required": false,
					"description": "Name of the include block to base the parent directory on (required if multiple include blocks exist)"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Absolute path to the parent Terragrunt configuration directory",
				"validation": {
					"pattern": "^[/\\\\].*"
				}
			},
			"examples": [
				"include {\n  path = \"${get_parent_terragrunt_dir()}/common.hcl\"\n}"
			],
			"deprecated": false
		},
		{
			"name": "get_original_terragrunt_dir",
			"description": "Returns the directory where the original Terragrunt configuration file lives. This is primarily useful when one Terragrunt config is being read from another.\n\n* Returns the absolute path to where the original terragrunt.hcl file lives.\n* Useful when one Terragrunt config is being read from another config file.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Absolute path to original Terragrunt configuration directory",
				"validation": {
					"pattern": "^[/\\\\].*"
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_terraform_commands_that_need_input",
			"description": "Gets the list of Terraform commands that accept the -input parameter.\n\n* Returns a list of Terraform commands that accept the -input=(true or false) parameter.\n* Useful for configuring commands that should run non-interactively.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of Terraform commands that accept -input parameter",
				"validation": {
					"allowedValues": [
						"plan",
						"apply",
						"refresh",
						"import",
						"init"
					]
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_terraform_commands_that_need_parallelism",
			"description": "Gets the list of Terraform commands that accept the -parallelism parameter.\n\n* Returns a list of Terraform commands that can have their parallelism modified.\n* Useful for controlling resource creation parallelism.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of Terraform commands that accept -parallelism parameter",
				"validation": {
					"allowedValues": [
						"plan",
						"apply",
						"destroy"
					]
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_aws_account_alias",
			"description": "Returns the AWS account alias associated with the current credentials.\n\n* Returns the alias of the current AWS account.\n* Returns empty string if alias cannot be found.\n* Value can change during parsing of HCL code.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "AWS account alias or empty string"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_aws_account_id",
			"description": "Returns the AWS account ID associated with the current credentials.\n\n* Returns the ID of the current AWS account.\n* Value can change during parsing of HCL code, for example after evaluation of iam_role attribute.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "AWS account ID",
				"validation": {
					"pattern": "^\\d{12}$"
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_aws_caller_identity_arn",
			"description": "Returns the ARN of the AWS identity associated with the current credentials.\n\n* Returns the ARN of the current AWS identity.\n* Value can change during parsing of HCL code, for example after evaluation of iam_role attribute.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "AWS caller identity ARN",
				"validation": {
					"pattern": "^arn:aws:iam::\\d{12}:.+$"
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_aws_caller_identity_user_id",
			"description": "Returns the UserId of the AWS identity associated with the current credentials.\n\n* Returns the UserId of the current AWS identity.\n* Value can change during parsing of HCL code, for example after evaluation of iam_role attribute.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "AWS caller identity UserId"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_working_dir",
			"description": "Returns the absolute path where Terragrunt runs Terraform commands.\n\n* Returns the absolute path to the working directory.\n* Useful when you need to manage substitutions of vars inside a *.tfvars file located in terragrunt's tmp dir.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Absolute path to working directory",
				"validation": {
					"pattern": "^[/\\\\].*"
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "mark_as_read",
			"description": "Marks a file as read for inclusion by the queue-include-units-reading flag.\n\n* Marks the specified file as being read by the configuration.\n* Useful for situations when you want to mark a file as read but are not reading it using a native Terragrunt HCL function.",
			"parameters": [
				{
					"name": "file_path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to mark as read"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Path to the marked file"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_default_retryable_errors",
			"description": "Returns the list of default retryable errors.\n\n* Returns a list of error patterns that Terragrunt will retry by default.\n* Useful for extending the default retry behavior.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of default retryable error patterns"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_terragrunt_source_cli_flag",
			"description": "Returns the value passed via --terragrunt-source flag or TERRAGRUNT_SOURCE environment variable.\n\n* Returns the source override value if specified.\n* Returns empty string if neither the flag nor environment variable is set.\n* Useful for constructing hooks or flags that only apply to local development.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Source override value or empty string"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "path_relative_from_include",
			"description": "Returns the relative path between the path specified in its include block and the current terragrunt.hcl file.\n\n* Counterpart to path_relative_to_include().\n* Useful for constructing relative paths from included configurations.",
			"parameters": [
				{
					"name": "name",
					"types": [
						"string"
					],
					"required": false,
					"description": "Name of the include block to base the relative path on (required if multiple include blocks exist)"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Relative path from include to current configuration"
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "get_terraform_commands_that_need_vars",
			"description": "Gets the list of Terraform commands that accept -var and -var-file parameters.\n\n* Returns a list of Terraform commands that can use input variables.\n* Useful for conditionally applying variable files.",
			"parameters": [],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of Terraform commands that accept variables",
				"validation": {
					"allowedValues": [
						"plan",
						"apply",
						"destroy",
						"refresh",
						"console"
					]
				}
			},
			"examples": [],
			"deprecated": false
		},
		{
			"name": "abs",
			"description": "Returns the absolute value of a number.\n\n* Returns the absolute value of the given number.\n* If the number is 0 or positive, returns as-is.\n* If the number is negative, returns its positive counterpart.",
			"parameters": [
				{
					"name": "number",
					"types": [
						"number"
					],
					"required": true,
					"description": "The number to get the absolute value of"
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Absolute value of the input number",
				"validation": {
					"min": 0
				}
			},
			"examples": [
				"locals { absolute = abs(-42) }"
			],
			"deprecated": false
		},
		{
			"name": "abspath",
			"description": "Converts a relative path to an absolute path.\n\n* Takes a string containing a relative path and converts it to an absolute path.\n* The path is relative to the current working directory.\n* Does not verify that the resulting path exists.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Relative path to convert to absolute"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Absolute path",
				"validation": {
					"pattern": "^[/\\\\].*"
				}
			},
			"examples": [
				"locals { full_path = abspath(\"../config\") }"
			],
			"deprecated": false
		},
		{
			"name": "alltrue",
			"description": "Returns true if all elements in a list are true or \"true\".\n\n* Takes a list of boolean values.\n* Returns true if all elements are true.\n* Returns false if any element is false.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of boolean values to check",
					"validation": {
						"allowedValues": [
							true,
							false,
							"true",
							"false"
						]
					}
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if all elements are true, false otherwise"
			},
			"examples": [
				"locals { all_enabled = alltrue([true, true, true]) }"
			],
			"deprecated": false
		},
		{
			"name": "anytrue",
			"description": "Returns true if any element in a list is true or \"true\".\n\n* Takes a list of boolean values.\n* Returns true if any element is true.\n* Returns false if all elements are false.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of boolean values to check",
					"validation": {
						"allowedValues": [
							true,
							false,
							"true",
							"false"
						]
					}
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if any element is true, false otherwise"
			},
			"examples": [
				"locals { any_enabled = anytrue([false, true, false]) }"
			],
			"deprecated": false
		},
		{
			"name": "base64decode",
			"description": "Decodes a base64-encoded string.\n\n* Takes a base64-encoded string and returns the decoded value.\n* Returns an error if the input is not valid base64.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "Base64-encoded string to decode",
					"validation": {
						"pattern": "^[A-Za-z0-9+/]*={0,2}$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Decoded string"
			},
			"examples": [
				"locals { decoded = base64decode(\"SGVsbG8=\") }"
			],
			"deprecated": false
		},
		{
			"name": "base64encode",
			"description": "Encodes a string in base64.\n\n* Takes a regular string and returns the base64-encoded value.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to encode in base64"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded string",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]*={0,2}$"
				}
			},
			"examples": [
				"locals { encoded = base64encode(\"Hello\") }"
			],
			"deprecated": false
		},
		{
			"name": "base64gunzip",
			"description": "Decodes a base64-encoded string and un-gzips the result.\n\n* Takes a base64-encoded gzipped string and returns the decoded, uncompressed value.\n* Returns an error if the input is not valid base64 or gzip data.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "Base64-encoded gzipped string to decode",
					"validation": {
						"pattern": "^[A-Za-z0-9+/]*={0,2}$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Decoded and uncompressed string"
			},
			"examples": [
				"locals { uncompressed = base64gunzip(var.compressed_data) }"
			],
			"deprecated": false
		},
		{
			"name": "base64gzip",
			"description": "Compresses a string with gzip and base64-encodes the result.\n\n* Takes a string, compresses it with gzip, and returns the base64-encoded result.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to compress and encode"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded gzipped string",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]*={0,2}$"
				}
			},
			"examples": [
				"locals { compressed = base64gzip(\"Hello World\") }"
			],
			"deprecated": false
		},
		{
			"name": "base64sha256",
			"description": "Returns a base64-encoded SHA256 hash of the given string.\n\n* Computes the SHA256 hash of the input and returns it base64-encoded.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to hash"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded SHA256 hash",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]{43}=$"
				}
			},
			"examples": [
				"locals { hash = base64sha256(\"Hello World\") }"
			],
			"deprecated": false
		},
		{
			"name": "base64sha512",
			"description": "Returns a base64-encoded SHA512 hash of the given string.\n\n* Computes the SHA512 hash of the input and returns it base64-encoded.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to hash"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded SHA512 hash",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]{86}=$"
				}
			},
			"examples": [
				"locals { hash = base64sha512(\"Hello World\") }"
			],
			"deprecated": false
		},
		{
			"name": "bcrypt",
			"description": "Returns a bcrypt hash of the given string.\n\n* Generates a bcrypt hash of the input string.\n* Cost parameter determines the computational complexity.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to hash"
				},
				{
					"name": "cost",
					"types": [
						"number"
					],
					"required": false,
					"description": "Cost parameter for bcrypt (default: 10)",
					"defaultValue": 10,
					"validation": {
						"min": 4,
						"max": 31
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Bcrypt hash of the input string",
				"validation": {
					"pattern": "^\\$2[ayb]\\$[0-9]{2}\\$[A-Za-z0-9./]{53}$"
				}
			},
			"examples": [
				"locals { password_hash = bcrypt(\"mypassword\", 12) }"
			],
			"deprecated": false
		},
		{
			"name": "can",
			"description": "Tests whether an expression can be evaluated without error.\n\n* Returns true if the expression can be evaluated.\n* Returns false if evaluating the expression would produce an error.",
			"parameters": [
				{
					"name": "expression",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Expression to test"
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if expression can be evaluated, false otherwise"
			},
			"examples": [
				"locals { safe = can(var.map[\"key\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "ceil",
			"description": "Returns the smallest integer greater than or equal to the given number.\n\n* Rounds a number up to the nearest integer.\n* Returns the input unchanged if it's already an integer.",
			"parameters": [
				{
					"name": "number",
					"types": [
						"number"
					],
					"required": true,
					"description": "Number to round up"
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Smallest integer greater than or equal to the input"
			},
			"examples": [
				"locals { rounded = ceil(1.1) } # Returns 2"
			],
			"deprecated": false
		},
		{
			"name": "chomp",
			"description": "Removes trailing newline characters from a string.\n\n* Removes both Unix-style (LF) and Windows-style (CRLF) line endings.\n* Returns the string unchanged if it has no trailing newlines.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to chomp"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String with trailing newlines removed"
			},
			"examples": [
				"locals { cleaned = chomp(\"hello\\n\") }"
			],
			"deprecated": false
		},
		{
			"name": "chunklist",
			"description": "Splits a list into fixed-size chunks.\n\n* Splits a list into smaller lists of the specified size.\n* The last chunk may be smaller if the list length is not divisible by the chunk size.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to split into chunks"
				},
				{
					"name": "chunk_size",
					"types": [
						"number"
					],
					"required": true,
					"description": "Size of each chunk",
					"validation": {
						"min": 1
					}
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of chunks"
			},
			"examples": [
				"locals { chunks = chunklist([1, 2, 3, 4, 5], 2) } # Returns [[1, 2], [3, 4], [5]]"
			],
			"deprecated": false
		},
		{
			"name": "cidrcontains",
			"description": "Checks whether a given IP address belongs to a given CIDR network address range.\n\n* Returns true if the IP address is within the specified CIDR range.\n* Returns false otherwise.",
			"parameters": [
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "CIDR range to check against",
					"validation": {
						"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
					}
				},
				{
					"name": "ip",
					"types": [
						"string"
					],
					"required": true,
					"description": "IP address to check",
					"validation": {
						"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
					}
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if IP is in CIDR range"
			},
			"examples": [
				"locals { in_range = cidrcontains(\"10.0.0.0/8\", \"10.0.0.1\") }"
			],
			"deprecated": false
		},
		{
			"name": "cidrhost",
			"description": "Calculates a full IP address within a CIDR range.\n\n* Takes a CIDR prefix and host number.\n* Returns the IP address that corresponds to that host number within the CIDR range.",
			"parameters": [
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "CIDR range",
					"validation": {
						"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
					}
				},
				{
					"name": "hostnum",
					"types": [
						"number"
					],
					"required": true,
					"description": "Host number within the CIDR range",
					"validation": {
						"min": 0
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "IP address for the specified host",
				"validation": {
					"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
				}
			},
			"examples": [
				"locals { ip = cidrhost(\"10.0.0.0/8\", 2) }"
			],
			"deprecated": false
		},
		{
			"name": "cidrnetmask",
			"description": "Converts an IPv4 CIDR prefix length to its netmask address.\n\n* Converts a CIDR prefix length (like /24) to a subnet mask address.\n* Works only with IPv4 addresses.",
			"parameters": [
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "CIDR prefix",
					"validation": {
						"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Subnet mask address",
				"validation": {
					"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
				}
			},
			"examples": [
				"locals { netmask = cidrnetmask(\"10.0.0.0/24\") } # Returns 255.255.255.0"
			],
			"deprecated": false
		},
		{
			"name": "cidrsubnet",
			"description": "Calculates a subnet address within a larger CIDR range.\n\n* Takes a CIDR prefix and extends its prefix length by a given number of bits.\n* Returns a subnet address within the given CIDR range.",
			"parameters": [
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "CIDR range",
					"validation": {
						"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
					}
				},
				{
					"name": "newbits",
					"types": [
						"number"
					],
					"required": true,
					"description": "Number of additional bits for the subnet prefix",
					"validation": {
						"min": 1,
						"max": 32
					}
				},
				{
					"name": "netnum",
					"types": [
						"number"
					],
					"required": true,
					"description": "Subnet number within the prefix",
					"validation": {
						"min": 0
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Subnet CIDR range",
				"validation": {
					"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
				}
			},
			"examples": [
				"locals { subnet = cidrsubnet(\"10.0.0.0/16\", 8, 2) }"
			],
			"deprecated": false
		},
		{
			"name": "cidrsubnets",
			"description": "Calculates multiple consecutive subnet addresses within a CIDR range.\n\n* Takes a CIDR prefix and list of subnet sizes.\n* Returns a list of consecutive subnet CIDR ranges.",
			"parameters": [
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "CIDR range",
					"validation": {
						"pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
					}
				},
				{
					"name": "newbits",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of numbers of new bits for each subnet",
					"variadic": true,
					"validation": {
						"min": 1,
						"max": 32
					}
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of subnet CIDR ranges"
			},
			"examples": [
				"locals { subnets = cidrsubnets(\"10.0.0.0/16\", 4, 4, 8) }"
			],
			"deprecated": false
		},
		{
			"name": "compact",
			"description": "Removes null or empty string elements from a list.\n\n* Takes a list and returns a new list with all null and \"\" elements removed.\n* Preserves the order of the remaining elements.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to compact"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List with null and empty string elements removed"
			},
			"examples": [
				"locals { cleaned = compact([\"a\", \"\", \"b\", null, \"c\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "concat",
			"description": "Combines multiple lists into a single list.\n\n* Takes two or more lists and combines them into a single list.\n* Maintains the order of elements from the input lists.",
			"parameters": [
				{
					"name": "lists",
					"types": [
						"array"
					],
					"required": true,
					"description": "Lists to concatenate",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Combined list"
			},
			"examples": [
				"locals { combined = concat([1, 2], [3, 4], [5]) }"
			],
			"deprecated": false
		},
		{
			"name": "contains",
			"description": "Determines whether a list contains a given element.\n\n* Returns true if the list contains the given value.\n* Returns false otherwise.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to search"
				},
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Value to find"
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if value is in list"
			},
			"examples": [
				"locals { has_element = contains([\"a\", \"b\", \"c\"], \"b\") }"
			],
			"deprecated": false
		},
		{
			"name": "csvdecode",
			"description": "Decodes CSV-formatted data into a list of maps.\n\n* Takes a string containing CSV data.\n* Returns a list of maps where each map's keys are from the header row.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "CSV-formatted string to decode"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of maps representing CSV rows"
			},
			"examples": [
				"locals { data = csvdecode(file(\"data.csv\")) }"
			],
			"deprecated": false
		},
		{
			"name": "distinct",
			"description": "Removes duplicate elements from a list.\n\n* Takes a list and returns a new list with duplicate elements removed.\n* Preserves the order of first occurrence of each element.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to deduplicate"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List with duplicates removed"
			},
			"examples": [
				"locals { unique = distinct([\"a\", \"b\", \"a\", \"c\", \"b\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "element",
			"description": "Retrieves a single element from a list by its index.\n\n* Returns the element at the specified index.\n* If index is greater than the list length, wraps around using modulo.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to get element from"
				},
				{
					"name": "index",
					"types": [
						"number"
					],
					"required": true,
					"description": "Index to retrieve",
					"validation": {
						"min": 0
					}
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Element at the specified index"
			},
			"examples": [
				"locals { item = element([\"a\", \"b\", \"c\"], 1) }"
			],
			"deprecated": false
		},
		{
			"name": "endswith",
			"description": "Checks if a string ends with a specified suffix.\n\n* Returns true if the string ends with the suffix.\n* Returns false otherwise.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to check"
				},
				{
					"name": "suffix",
					"types": [
						"string"
					],
					"required": true,
					"description": "Suffix to look for"
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if string ends with suffix"
			},
			"examples": [
				"locals { has_suffix = endswith(\"hello.txt\", \".txt\") }"
			],
			"deprecated": false
		},
		{
			"name": "file",
			"description": "Reads the contents of a file.\n\n* Reads and returns the contents of the file at the given path.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to read",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Contents of the file"
			},
			"examples": [
				"locals { content = file(\"${path.module}/file.txt\") }"
			],
			"deprecated": false
		},
		{
			"name": "filebase64",
			"description": "Reads and base64-encodes the contents of a file.\n\n* Reads a file and returns its contents as a base64-encoded string.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to read",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded contents of the file",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]*={0,2}$"
				}
			},
			"examples": [
				"locals { encoded = filebase64(\"${path.module}/cert.pem\") }"
			],
			"deprecated": false
		},
		{
			"name": "filebase64sha256",
			"description": "Returns a base64-encoded SHA256 hash of a file's contents.\n\n* Computes the SHA256 hash of the file's contents and returns it base64-encoded.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to hash",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded SHA256 hash of the file",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]{43}=$"
				}
			},
			"examples": [
				"locals { hash = filebase64sha256(\"${path.module}/data.bin\") }"
			],
			"deprecated": false
		},
		{
			"name": "filebase64sha512",
			"description": "Returns a base64-encoded SHA512 hash of a file's contents.\n\n* Computes the SHA512 hash of the file's contents and returns it base64-encoded.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to hash",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded SHA512 hash of the file",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]{86}=$"
				}
			},
			"examples": [
				"locals { hash = filebase64sha512(\"${path.module}/data.bin\") }"
			],
			"deprecated": false
		},
		{
			"name": "fileexists",
			"description": "Determines whether a file exists at a given path.\n\n* Returns true if a file exists at the specified path.\n* Returns false if the file does not exist or is a directory.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to check for file existence",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if file exists"
			},
			"examples": [
				"locals { exists = fileexists(\"${path.module}/config.json\") }"
			],
			"deprecated": false
		},
		{
			"name": "filemd5",
			"description": "Returns the MD5 hash of a file's contents.\n\n* Computes and returns the MD5 hash of the file's contents.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to hash",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "MD5 hash of the file",
				"validation": {
					"pattern": "^[a-f0-9]{32}$"
				}
			},
			"examples": [
				"locals { hash = filemd5(\"${path.module}/data.txt\") }"
			],
			"deprecated": false
		},
		{
			"name": "fileset",
			"description": "Enumerates files that match a glob pattern.\n\n* Returns a list of files that match the specified pattern.\n* Supports standard glob syntax.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Base directory for the search",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				},
				{
					"name": "pattern",
					"types": [
						"string"
					],
					"required": true,
					"description": "Glob pattern to match files"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of matching file paths"
			},
			"examples": [
				"locals { files = fileset(path.module, \"*.txt\") }"
			],
			"deprecated": false
		},
		{
			"name": "filesha1",
			"description": "Returns the SHA1 hash of a file's contents.\n\n* Computes and returns the SHA1 hash of the file's contents.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to hash",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "SHA1 hash of the file",
				"validation": {
					"pattern": "^[a-f0-9]{40}$"
				}
			},
			"examples": [
				"locals { hash = filesha1(\"${path.module}/data.bin\") }"
			],
			"deprecated": false
		},
		{
			"name": "filesha256",
			"description": "Returns the SHA256 hash of a file's contents.\n\n* Computes and returns the SHA256 hash of the file's contents.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to hash",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "SHA256 hash of the file",
				"validation": {
					"pattern": "^[a-f0-9]{64}$"
				}
			},
			"examples": [
				"locals { hash = filesha256(\"${path.module}/data.bin\") }"
			],
			"deprecated": false
		},
		{
			"name": "filesha512",
			"description": "Returns the SHA512 hash of a file's contents.\n\n* Computes and returns the SHA512 hash of the file's contents.\n* Path is relative to the configuration file.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to the file to hash",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "SHA512 hash of the file",
				"validation": {
					"pattern": "^[a-f0-9]{128}$"
				}
			},
			"examples": [
				"locals { hash = filesha512(\"${path.module}/data.bin\") }"
			],
			"deprecated": false
		},
		{
			"name": "flatten",
			"description": "Flattens nested lists into a single list.\n\n* Takes a list that may contain other lists and flattens it into a single list.\n* Removes all nesting levels.\n* Preserves the order of elements.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "Nested list to flatten"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Flattened list with no nesting"
			},
			"examples": [
				"locals { flat = flatten([[1, 2], [3], [4, [5, 6]]]) }"
			],
			"deprecated": false
		},
		{
			"name": "floor",
			"description": "Returns the largest integer less than or equal to the given number.\n\n* Rounds a number down to the nearest integer.\n* Returns the input unchanged if it's already an integer.",
			"parameters": [
				{
					"name": "number",
					"types": [
						"number"
					],
					"required": true,
					"description": "Number to round down"
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Largest integer less than or equal to the input"
			},
			"examples": [
				"locals { rounded = floor(1.7) }"
			],
			"deprecated": false
		},
		{
			"name": "format",
			"description": "Creates a string by formatting a number of values according to a format string.\n\n* Similar to sprintf in other languages.\n* Supports various format verbs (%s, %d, %g, etc.).",
			"parameters": [
				{
					"name": "format",
					"types": [
						"string"
					],
					"required": true,
					"description": "Format string",
					"validation": {
						"pattern": ".*%[sdfgGbBoOxXeEv].*"
					}
				},
				{
					"name": "args",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"variadic": true,
					"description": "Values to format"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Formatted string"
			},
			"examples": [
				"locals { message = format(\"Hello, %s!\", var.name) }"
			],
			"deprecated": false
		},
		{
			"name": "formatdate",
			"description": "Converts a timestamp into a different time format.\n\n* Formats a timestamp string into the specified format.\n* Uses strftime-style format specifiers.",
			"parameters": [
				{
					"name": "format",
					"types": [
						"string"
					],
					"required": true,
					"description": "Format specification",
					"validation": {
						"pattern": "%[YymdHMSjUwWcxX]"
					}
				},
				{
					"name": "timestamp",
					"types": [
						"string"
					],
					"required": true,
					"description": "Timestamp to format",
					"validation": {
						"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Formatted timestamp"
			},
			"examples": [
				"locals { date = formatdate(\"YYYY-MM-DD\", \"2024-02-04T12:34:56Z\") }"
			],
			"deprecated": false
		},
		{
			"name": "formatlist",
			"description": "Creates a list of strings by formatting each of several collections of values.\n\n* Like format, but applies the format string to each element of a list.\n* Returns a list of formatted strings.",
			"parameters": [
				{
					"name": "format",
					"types": [
						"string"
					],
					"required": true,
					"description": "Format string",
					"validation": {
						"pattern": ".*%[sdfgGbBoOxXeEv].*"
					}
				},
				{
					"name": "args",
					"types": [
						"array"
					],
					"required": true,
					"variadic": true,
					"description": "Lists of values to format"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of formatted strings"
			},
			"examples": [
				"locals { names = formatlist(\"user-%s\", [\"a\", \"b\", \"c\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "indent",
			"description": "Adds a prefix to all but the first line of a multi-line string.\n\n* Adds the specified number of spaces to the beginning of all lines except the first.\n* Useful for formatting multi-line strings.",
			"parameters": [
				{
					"name": "spaces",
					"types": [
						"number"
					],
					"required": true,
					"description": "Number of spaces to indent",
					"validation": {
						"min": 0,
						"max": 100
					}
				},
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to indent"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Indented string"
			},
			"examples": [
				"locals { indented = indent(2, \"first\\nsecond\\nthird\") }"
			],
			"deprecated": false
		},
		{
			"name": "index",
			"description": "Finds the index of a given value in a list.\n\n* Returns the index of the first occurrence of a value in a list.\n* Returns an error if the value is not found.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to search"
				},
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Value to find"
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Index of the value in the list",
				"validation": {
					"min": 0
				}
			},
			"examples": [
				"locals { pos = index([\"a\", \"b\", \"c\"], \"b\") }"
			],
			"deprecated": false
		},
		{
			"name": "log",
			"description": "Returns the logarithm of a number in a given base.\n\n* Calculates the logarithm of a number using the specified base.\n* Returns an error if either argument is <= 0.",
			"parameters": [
				{
					"name": "number",
					"types": [
						"number"
					],
					"required": true,
					"description": "Number to calculate logarithm of",
					"validation": {
						"min": 0.000001
					}
				},
				{
					"name": "base",
					"types": [
						"number"
					],
					"required": true,
					"description": "Base of the logarithm",
					"validation": {
						"min": 0.000001
					}
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Logarithm of the number"
			},
			"examples": [
				"locals { result = log(16, 2) } # Returns 4"
			],
			"deprecated": false
		},
		{
			"name": "lookup",
			"description": "Retrieves the value of a given key from a map.\n\n* Looks up the value for a given key in a map.\n* Can provide a default value if the key doesn't exist.\n* Returns an error if key not found and no default provided.",
			"parameters": [
				{
					"name": "map",
					"types": [
						"object"
					],
					"required": true,
					"description": "Map to look up value in"
				},
				{
					"name": "key",
					"types": [
						"string"
					],
					"required": true,
					"description": "Key to look up"
				},
				{
					"name": "default",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": false,
					"description": "Default value if key not found"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Value from map or default"
			},
			"examples": [
				"locals { value = lookup(var.map, \"key\", \"default\") }"
			],
			"deprecated": false
		},
		{
			"name": "lower",
			"description": "Converts all characters in a string to lowercase.\n\n* Converts string to lowercase.\n* Returns an empty string if given an empty string.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to convert to lowercase"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Lowercase string"
			},
			"examples": [
				"locals { result = lower(\"HELLO\") }"
			],
			"deprecated": false
		},
		{
			"name": "matchkeys",
			"description": "Returns a list of values from the first list whose corresponding values in the second list match a given value.\n\n* Takes two lists of equal length and a search value.\n* Returns elements from first list where corresponding elements in second list match search value.",
			"parameters": [
				{
					"name": "values",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of values to select from"
				},
				{
					"name": "keys",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to match against"
				},
				{
					"name": "searchset",
					"types": [
						"array"
					],
					"required": true,
					"description": "Values to search for"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of matched values"
			},
			"examples": [
				"locals { matched = matchkeys([\"a\", \"b\", \"c\"], [1, 2, 1], [1]) }"
			],
			"deprecated": false
		},
		{
			"name": "max",
			"description": "Returns the largest value from a list of numbers.\n\n* Takes one or more numbers and returns the highest value.\n* Returns an error if any argument is not a number.",
			"parameters": [
				{
					"name": "numbers",
					"types": [
						"array"
					],
					"required": true,
					"description": "Numbers to compare",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Largest number from the input"
			},
			"examples": [
				"locals { highest = max(5, 12, 9) }"
			],
			"deprecated": false
		},
		{
			"name": "min",
			"description": "Returns the smallest value from a list of numbers.\n\n* Takes one or more numbers and returns the lowest value.\n* Returns an error if any argument is not a number.",
			"parameters": [
				{
					"name": "numbers",
					"types": [
						"array"
					],
					"required": true,
					"description": "Numbers to compare",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Smallest number from the input"
			},
			"examples": [
				"locals { lowest = min(5, 12, 9) }"
			],
			"deprecated": false
		},
		{
			"name": "one",
			"description": "Returns either the first non-null value or the last value from a list.\n\n* Takes list of values and returns first non-null value.\n* If all values are null, returns the last value.\n* If list is empty, returns null.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of values"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "First non-null value or last value"
			},
			"examples": [
				"locals { result = one([null, \"\", \"a\", \"b\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "parseint",
			"description": "Parses a string as a number in the specified base.\n\n* Converts a string representation of an integer to a number.\n* Supports bases 2 through 62.",
			"parameters": [
				{
					"name": "number",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to parse"
				},
				{
					"name": "base",
					"types": [
						"number"
					],
					"required": false,
					"description": "Base to parse in (default 10)",
					"defaultValue": 10,
					"validation": {
						"min": 2,
						"max": 62
					}
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Parsed integer value"
			},
			"examples": [
				"locals { value = parseint(\"FF\", 16) }"
			],
			"deprecated": false
		},
		{
			"name": "pow",
			"description": "Returns the given number raised to the given power.\n\n* Raises base number to specified exponent.\n* Returns an error if result would be imaginary.",
			"parameters": [
				{
					"name": "base",
					"types": [
						"number"
					],
					"required": true,
					"description": "Base number"
				},
				{
					"name": "exponent",
					"types": [
						"number"
					],
					"required": true,
					"description": "Power to raise to"
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Result of the power operation"
			},
			"examples": [
				"locals { squared = pow(2, 3) }"
			],
			"deprecated": false
		},
		{
			"name": "range",
			"description": "Generates a list of numbers from start to end (inclusive).\n\n* Creates a sequence of numbers with optional step value.\n* Can count up or down based on start and end values.",
			"parameters": [
				{
					"name": "start",
					"types": [
						"number"
					],
					"required": true,
					"description": "First number in range"
				},
				{
					"name": "end",
					"types": [
						"number"
					],
					"required": true,
					"description": "Last number in range"
				},
				{
					"name": "step",
					"types": [
						"number"
					],
					"required": false,
					"description": "Increment between numbers",
					"defaultValue": 1,
					"validation": {
						"min": 0.000001
					}
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of numbers in the range"
			},
			"examples": [
				"locals { numbers = range(0, 10, 2) }"
			],
			"deprecated": false
		},
		{
			"name": "regex",
			"description": "Applies a regular expression to a string and returns the first match.\n\n* Returns the first match found in the string.\n* Returns an error if the pattern is invalid.",
			"parameters": [
				{
					"name": "pattern",
					"types": [
						"string"
					],
					"required": true,
					"description": "Regular expression pattern",
					"validation": {
						"pattern": "^[^()]*$"
					}
				},
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to search"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "First matching substring"
			},
			"examples": [
				"locals { match = regex(\"[0-9]+\", \"abc123def\") }"
			],
			"deprecated": false
		},
		{
			"name": "regexall",
			"description": "Applies a regular expression to a string and returns all matches.\n\n* Returns a list of all non-overlapping matches in the string.\n* Returns an error if the pattern is invalid.",
			"parameters": [
				{
					"name": "pattern",
					"types": [
						"string"
					],
					"required": true,
					"description": "Regular expression pattern",
					"validation": {
						"pattern": "^[^()]*$"
					}
				},
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to search"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of all matching substrings"
			},
			"examples": [
				"locals { matches = regexall(\"[0-9]+\", \"abc123def456\") }"
			],
			"deprecated": false
		},
		{
			"name": "replace",
			"description": "Replaces all occurrences of a substring in a string.\n\n* Replaces each occurrence of search string with replace string.\n* Case-sensitive replacement.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to perform replacement in"
				},
				{
					"name": "search",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to search for"
				},
				{
					"name": "replace",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to replace with"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String with replacements"
			},
			"examples": [
				"locals { result = replace(\"Hello World\", \"World\", \"Terraform\") }"
			],
			"deprecated": false
		},
		{
			"name": "reverse",
			"description": "Reverses a list of elements.\n\n* Creates a new list with all elements in reverse order.\n* Works with lists of any element type.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to reverse"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Reversed list"
			},
			"examples": [
				"locals { reversed = reverse([1, 2, 3, 4, 5]) }"
			],
			"deprecated": false
		},
		{
			"name": "rsadecrypt",
			"description": "Decrypts an RSA-encrypted message.\n\n* Decrypts ciphertext using provided private key.\n* Expects base64-encoded ciphertext.",
			"parameters": [
				{
					"name": "ciphertext",
					"types": [
						"string"
					],
					"required": true,
					"description": "Base64-encoded encrypted message",
					"validation": {
						"pattern": "^[A-Za-z0-9+/]*={0,2}$"
					}
				},
				{
					"name": "privatekey",
					"types": [
						"string"
					],
					"required": true,
					"description": "RSA private key in PEM format",
					"validation": {
						"pattern": "^-----BEGIN RSA PRIVATE KEY-----[\\s\\S]*-----END RSA PRIVATE KEY-----$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Decrypted message"
			},
			"examples": [
				"locals { decrypted = rsadecrypt(var.encrypted_message, file(\"private.pem\")) }"
			],
			"deprecated": false
		},
		{
			"name": "setintersection",
			"description": "Takes multiple sets and returns a new set containing only elements that appear in all of the given sets.\n\n* Returns the intersection of all given sets.\n* Returns empty list if no common elements exist.\n* Sets are represented as lists.",
			"parameters": [
				{
					"name": "sets",
					"types": [
						"array"
					],
					"required": true,
					"description": "Sets to intersect",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Set of elements common to all input sets"
			},
			"examples": [
				"locals { common = setintersection([\"a\", \"b\"], [\"b\", \"c\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "setproduct",
			"description": "Takes multiple sets and returns a new set containing all possible combinations of elements from each set.\n\n* Returns the Cartesian product of the given sets.\n* Sets are represented as lists.",
			"parameters": [
				{
					"name": "sets",
					"types": [
						"array"
					],
					"required": true,
					"description": "Sets to combine",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of all possible combinations"
			},
			"examples": [
				"locals { combinations = setproduct([\"a\", \"b\"], [1, 2]) }"
			],
			"deprecated": false
		},
		{
			"name": "setsubtract",
			"description": "Takes two sets and returns a new set containing elements from the first set that are not present in the second set.\n\n* Returns elements unique to the first set.\n* Sets are represented as lists.",
			"parameters": [
				{
					"name": "a",
					"types": [
						"array"
					],
					"required": true,
					"description": "First set"
				},
				{
					"name": "b",
					"types": [
						"array"
					],
					"required": true,
					"description": "Set to subtract"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Set of elements in first set but not in second"
			},
			"examples": [
				"locals { difference = setsubtract([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"d\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "setunion",
			"description": "Takes multiple sets and returns a new set containing all unique elements from all sets.\n\n* Returns the union of all given sets.\n* Removes duplicate elements.\n* Sets are represented as lists.",
			"parameters": [
				{
					"name": "sets",
					"types": [
						"array"
					],
					"required": true,
					"description": "Sets to unite",
					"variadic": true
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Set of all unique elements"
			},
			"examples": [
				"locals { all = setunion([\"a\", \"b\"], [\"b\", \"c\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "slice",
			"description": "Extracts a portion of a list between two indices.\n\n* Returns a subset of a list from start index up to but not including end index.\n* Indices can be negative to count from end of list.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List to slice"
				},
				{
					"name": "start_index",
					"types": [
						"number"
					],
					"required": true,
					"description": "Starting index"
				},
				{
					"name": "end_index",
					"types": [
						"number"
					],
					"required": true,
					"description": "Ending index (exclusive)"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Sliced portion of the list"
			},
			"examples": [
				"locals { portion = slice([\"a\", \"b\", \"c\", \"d\"], 1, 3) }"
			],
			"deprecated": false
		},
		{
			"name": "sort",
			"description": "Sorts a list of strings lexicographically.\n\n* Returns a new list with all elements sorted.\n* Only works with lists of strings.\n* Case-sensitive sorting.",
			"parameters": [
				{
					"name": "list",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of strings to sort",
					"validation": {
						"allowedTypes": [
							"string"
						]
					}
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Sorted list"
			},
			"examples": [
				"locals { sorted = sort([\"c\", \"a\", \"b\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "split",
			"description": "Splits a string by a given separator.\n\n* Returns a list of substrings.\n* If separator is empty, splits into individual characters.\n* If no separator found, returns single-element list.",
			"parameters": [
				{
					"name": "separator",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to separate on"
				},
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to split"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of substrings"
			},
			"examples": [
				"locals { parts = split(\",\", \"foo,bar,baz\") }"
			],
			"deprecated": false
		},
		{
			"name": "strcontains",
			"description": "Checks if a string contains a given substring.\n\n* Returns true if the string contains the given substring.\n* Case-sensitive comparison.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to search in"
				},
				{
					"name": "substr",
					"types": [
						"string"
					],
					"required": true,
					"description": "Substring to search for"
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if substring is found"
			},
			"examples": [
				"locals { contains = strcontains(\"Hello World\", \"World\") }"
			],
			"deprecated": false
		},
		{
			"name": "strrev",
			"description": "Reverses a string.\n\n* Returns a new string with characters in reverse order.\n* Works with Unicode strings.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to reverse"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Reversed string"
			},
			"examples": [
				"locals { reversed = strrev(\"Hello\") }"
			],
			"deprecated": false
		},
		{
			"name": "substr",
			"description": "Extracts a substring from a string.\n\n* Returns part of a string based on offset and length.\n* If length is not specified, returns rest of string from offset.\n* Offset can be negative to count from end of string.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to extract from"
				},
				{
					"name": "offset",
					"types": [
						"number"
					],
					"required": true,
					"description": "Starting position"
				},
				{
					"name": "length",
					"types": [
						"number"
					],
					"required": false,
					"description": "Length of substring to extract",
					"validation": {
						"min": 0
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Extracted substring"
			},
			"examples": [
				"locals { part = substr(\"Hello World\", 6, 5) }"
			],
			"deprecated": false
		},
		{
			"name": "tobool",
			"description": "Converts a value to boolean.\n\n* Converts its argument to a boolean value.\n* Accepts various string representations like \"true\", \"false\", \"1\", \"0\".\n* Returns error if conversion not possible.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean"
					],
					"required": true,
					"description": "Value to convert",
					"validation": {
						"allowedValues": [
							"true",
							"false",
							"1",
							"0",
							true,
							false,
							1,
							0
						]
					}
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "Boolean representation of value"
			},
			"examples": [
				"locals { bool_value = tobool(\"true\") }"
			],
			"deprecated": false
		},
		{
			"name": "tolist",
			"description": "Converts a value to list.\n\n* Converts its argument to a list.\n* If given a list, returns it unchanged.\n* Can convert sets and tuples to lists.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"array",
						"string",
						"number",
						"boolean",
						"object"
					],
					"required": true,
					"description": "Value to convert"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List representation of value"
			},
			"examples": [
				"locals { list_value = tolist(var.set) }"
			],
			"deprecated": false
		},
		{
			"name": "tomap",
			"description": "Converts a value to map.\n\n* Converts its argument to a map.\n* If given a map, returns it unchanged.\n* Returns error if conversion not possible.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"object",
						"array"
					],
					"required": true,
					"description": "Value to convert"
				}
			],
			"returnType": {
				"types": [
					"object"
				],
				"description": "Map representation of value"
			},
			"examples": [
				"locals { map_value = tomap(var.object) }"
			],
			"deprecated": false
		},
		{
			"name": "tonumber",
			"description": "Converts a value to number.\n\n* Converts its argument to a number.\n* Can convert string representations of numbers.\n* Returns error if conversion not possible.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number"
					],
					"required": true,
					"description": "Value to convert",
					"validation": {
						"pattern": "^-?\\d*\\.?\\d+$"
					}
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Numeric representation of value"
			},
			"examples": [
				"locals { num_value = tonumber(\"42\") }"
			],
			"deprecated": false
		},
		{
			"name": "toset",
			"description": "Converts a value to set.\n\n* Converts its argument to a set.\n* Removes duplicate elements.\n* Most commonly used with lists.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"array"
					],
					"required": true,
					"description": "Value to convert"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "Set representation of value"
			},
			"examples": [
				"locals { set_value = toset([\"a\", \"b\", \"a\"]) }"
			],
			"deprecated": false
		},
		{
			"name": "tostring",
			"description": "Converts a value to string.\n\n* Converts its argument to a string.\n* Works with numbers, bools, and other primitive types.\n* Returns error if conversion not possible.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean"
					],
					"required": true,
					"description": "Value to convert"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String representation of value"
			},
			"examples": [
				"locals { str_value = tostring(42) }"
			],
			"deprecated": false
		},
		{
			"name": "textdecodebase64",
			"description": "Decodes a Base64-encoded string into UTF-8 text.\n\n* Decodes base64 string into UTF-8 text.\n* Returns error if input is not valid base64 or UTF-8.\n* Useful for decoding stored credentials or certificates.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "Base64-encoded string to decode",
					"validation": {
						"pattern": "^[A-Za-z0-9+/]*={0,2}$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Decoded UTF-8 text"
			},
			"examples": [
				"locals { text = textdecodebase64(var.encoded_data) }"
			],
			"deprecated": false
		},
		{
			"name": "textencodebase64",
			"description": "Encodes UTF-8 text as a Base64 string.\n\n* Encodes UTF-8 text into base64 string.\n* Useful for storing text in formats that require base64.\n* Returns error if input is not valid UTF-8.",
			"parameters": [
				{
					"name": "str",
					"types": [
						"string"
					],
					"required": true,
					"description": "UTF-8 text to encode"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Base64-encoded string",
				"validation": {
					"pattern": "^[A-Za-z0-9+/]*={0,2}$"
				}
			},
			"examples": [
				"locals { encoded = textencodebase64(\"Hello, World!\") }"
			],
			"deprecated": false
		},
		{
			"name": "timeadd",
			"description": "Adds a duration to a timestamp.\n\n* Adds specified duration to timestamp.\n* Supports various duration units (s, m, h).\n* Returns RFC 3339 formatted timestamp.",
			"parameters": [
				{
					"name": "timestamp",
					"types": [
						"string"
					],
					"required": true,
					"description": "Timestamp string to add to",
					"validation": {
						"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
					}
				},
				{
					"name": "duration",
					"types": [
						"string"
					],
					"required": true,
					"description": "Duration to add (e.g., \"30m\", \"24h\")",
					"validation": {
						"pattern": "^\\d+[smh]$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "New timestamp",
				"validation": {
					"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
				}
			},
			"examples": [
				"locals { future = timeadd(timestamp(), \"24h\") }"
			],
			"deprecated": false
		},
		{
			"name": "timecmp",
			"description": "Compares two timestamps.\n\n* Returns -1 if first timestamp is earlier.\n* Returns 0 if timestamps are equal.\n* Returns 1 if first timestamp is later.",
			"parameters": [
				{
					"name": "timestamp_a",
					"types": [
						"string"
					],
					"required": true,
					"description": "First timestamp to compare",
					"validation": {
						"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
					}
				},
				{
					"name": "timestamp_b",
					"types": [
						"string"
					],
					"required": true,
					"description": "Second timestamp to compare",
					"validation": {
						"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
					}
				}
			],
			"returnType": {
				"types": [
					"number"
				],
				"description": "Comparison result (-1, 0, or 1)",
				"validation": {
					"allowedValues": [
						-1,
						0,
						1
					]
				}
			},
			"examples": [
				"locals { is_later = timecmp(timestamp(), timeadd(timestamp(), \"1h\")) }"
			],
			"deprecated": false
		},
		{
			"name": "timestamp",
			"description": "Returns the current timestamp.\n\n* Returns current time in RFC 3339 format.\n* Time is in UTC.\n* Precision is to seconds.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Current timestamp",
				"validation": {
					"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
				}
			},
			"examples": [
				"locals { now = timestamp() }"
			],
			"deprecated": false
		},
		{
			"name": "trim",
			"description": "Removes specified characters from start and end of string.\n\n* Removes all instances of specified characters from both ends.\n* If no characters specified, removes whitespace.\n* Case-sensitive matching.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to trim"
				},
				{
					"name": "chars",
					"types": [
						"string"
					],
					"required": false,
					"description": "Characters to trim (defaults to whitespace)",
					"defaultValue": " \t\n\r"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Trimmed string"
			},
			"examples": [
				"locals { cleaned = trim(\"  Hello!  \") }"
			],
			"deprecated": false
		},
		{
			"name": "trimprefix",
			"description": "Removes specified prefix from start of string.\n\n* Removes prefix if string starts with it.\n* Returns string unchanged if it doesn't start with prefix.\n* Case-sensitive matching.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to trim"
				},
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "Prefix to remove"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String with prefix removed"
			},
			"examples": [
				"locals { name = trimprefix(\"prefix_name\", \"prefix_\") }"
			],
			"deprecated": false
		},
		{
			"name": "trimspace",
			"description": "Removes all leading and trailing whitespace.\n\n* Removes spaces, tabs, newlines from both ends.\n* Similar to trim() but specifically for whitespace.\n* Doesn't affect whitespace inside string.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to trim"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String with whitespace removed from ends"
			},
			"examples": [
				"locals { cleaned = trimspace(\"\\n  Hello World\\t  \") }"
			],
			"deprecated": false
		},
		{
			"name": "trimsuffix",
			"description": "Removes specified suffix from end of string.\n\n* Removes suffix if string ends with it.\n* Returns string unchanged if it doesn't end with suffix.\n* Case-sensitive matching.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to trim"
				},
				{
					"name": "suffix",
					"types": [
						"string"
					],
					"required": true,
					"description": "Suffix to remove"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "String with suffix removed"
			},
			"examples": [
				"locals { name = trimsuffix(\"name_suffix\", \"_suffix\") }"
			],
			"deprecated": false
		},
		{
			"name": "transpose",
			"description": "Takes a map of lists of strings and swaps the keys and values.\n\n* Creates new map with keys from list values and values from list of keys.\n* All lists must have same length.\n* Values must be strings.",
			"parameters": [
				{
					"name": "map",
					"types": [
						"object"
					],
					"required": true,
					"description": "Map of lists to transpose",
					"validation": {
						"allowedTypes": [
							"array"
						]
					}
				}
			],
			"returnType": {
				"types": [
					"object"
				],
				"description": "Transposed map"
			},
			"examples": [
				"locals { transposed = transpose({\"a\"=[1,2], \"b\"=[3,4]}) }"
			],
			"deprecated": false
		},
		{
			"name": "try",
			"description": "Attempts to evaluate an expression and returns a default value if it fails.\n\n* Returns the expression's value if evaluation succeeds.\n* Returns the default value if evaluation fails.\n* Useful for handling potential errors gracefully.",
			"parameters": [
				{
					"name": "expression",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Expression to try evaluating"
				},
				{
					"name": "default",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Value to return if evaluation fails"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Result of expression or default value"
			},
			"examples": [
				"locals { value = try(var.map[\"key\"], \"default\") }"
			],
			"deprecated": false
		},
		{
			"name": "type",
			"description": "Returns the type of a value.\n\n* Returns a string describing the type.\n* Useful for conditional logic based on value types.\n* Possible return values include: string, number, bool, list, map, null.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Value to check type of"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Type of the value",
				"validation": {
					"allowedValues": [
						"string",
						"number",
						"bool",
						"list",
						"map",
						"null"
					]
				}
			},
			"examples": [
				"locals { value_type = type(var.input) }"
			],
			"deprecated": false
		},
		{
			"name": "upper",
			"description": "Converts all characters in a string to uppercase.\n\n* Converts string to uppercase.\n* Works with Unicode characters.\n* Returns empty string if given empty string.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to convert to uppercase"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Uppercase string"
			},
			"examples": [
				"locals { upper_case = upper(\"Hello\") }"
			],
			"deprecated": false
		},
		{
			"name": "urlencode",
			"description": "Encodes a string according to URL encoding rules.\n\n* URL-encodes the given string.\n* Replaces special characters with percent-encoded values.\n* Safe for use in URLs.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to URL-encode"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "URL-encoded string",
				"validation": {
					"pattern": "^[A-Za-z0-9_.~\\-%]*$"
				}
			},
			"examples": [
				"locals { encoded = urlencode(\"Hello World\") }"
			],
			"deprecated": false
		},
		{
			"name": "urldecode",
			"description": "Decodes a URL-encoded string.\n\n* Decodes a URL-encoded string.\n* Converts percent-encoded sequences to original characters.\n* Returns error if input is not valid URL-encoded string.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "URL-encoded string to decode",
					"validation": {
						"pattern": "^[A-Za-z0-9_.~\\-%]*$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Decoded string"
			},
			"examples": [
				"locals { decoded = urldecode(\"%20Hello%20World%20\") }"
			],
			"deprecated": false
		},
		{
			"name": "uuid",
			"description": "Generates a random UUID.\n\n* Generates a random UUID v4.\n* Returns a new UUID each time it's called.\n* Useful for creating unique identifiers.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Random UUID",
				"validation": {
					"pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
				}
			},
			"examples": [
				"locals { id = uuid() }"
			],
			"deprecated": false
		},
		{
			"name": "uuidv5",
			"description": "Generates a UUID v5 from a namespace UUID and name.\n\n* Generates deterministic UUID based on namespace and name.\n* Uses SHA-1 hashing.\n* Returns same UUID for same inputs.",
			"parameters": [
				{
					"name": "namespace",
					"types": [
						"string"
					],
					"required": true,
					"description": "UUID defining the namespace",
					"validation": {
						"pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
					}
				},
				{
					"name": "name",
					"types": [
						"string"
					],
					"required": true,
					"description": "Name to generate UUID from"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Generated UUID",
				"validation": {
					"pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-5[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
				}
			},
			"examples": [
				"locals { id = uuidv5(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"example\") }"
			],
			"deprecated": false
		},
		{
			"name": "values",
			"description": "Returns a list of the values in a map.\n\n* Extracts all values from a map into a list.\n* Order of values is not guaranteed.\n* Useful for iterating over map values.",
			"parameters": [
				{
					"name": "map",
					"types": [
						"object"
					],
					"required": true,
					"description": "Map to extract values from"
				}
			],
			"returnType": {
				"types": [
					"array"
				],
				"description": "List of map values"
			},
			"examples": [
				"locals { map_values = values({a = 1, b = 2, c = 3}) }"
			],
			"deprecated": false
		},
		{
			"name": "zipmap",
			"description": "Creates a map from a list of keys and a list of values.\n\n* Combines two lists into a map.\n* First list provides keys, second list provides values.\n* Lists must be same length.",
			"parameters": [
				{
					"name": "keys",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of keys",
					"validation": {
						"allowedTypes": [
							"string"
						]
					}
				},
				{
					"name": "values",
					"types": [
						"array"
					],
					"required": true,
					"description": "List of values"
				}
			],
			"returnType": {
				"types": [
					"object"
				],
				"description": "Map combining the keys and values"
			},
			"examples": [
				"locals { map = zipmap([\"a\", \"b\"], [1, 2]) }"
			],
			"deprecated": false
		},
		{
			"name": "pathexpand",
			"description": "Expands a path containing a ~ prefix into a full path.\n\n* Replaces ~ with user's home directory path.\n* Works with both Unix and Windows paths.\n* Returns the path unchanged if it doesn't start with ~.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path potentially starting with ~",
					"validation": {
						"pattern": "^~?[/\\\\].*$"
					}
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Expanded absolute path",
				"validation": {
					"pattern": "^[/\\\\].*$"
				}
			},
			"examples": [
				"locals { full_path = pathexpand(\"~/config/file.txt\") }"
			],
			"deprecated": false
		},
		{
			"name": "startswith",
			"description": "Checks if a string starts with a specified prefix.\n\n* Returns true if the string starts with the prefix.\n* Case-sensitive comparison.\n* Returns false if either argument is empty.",
			"parameters": [
				{
					"name": "string",
					"types": [
						"string"
					],
					"required": true,
					"description": "String to check"
				},
				{
					"name": "prefix",
					"types": [
						"string"
					],
					"required": true,
					"description": "Prefix to look for"
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if string starts with prefix"
			},
			"examples": [
				"locals { has_prefix = startswith(\"terraform-\", \"terraform\") }"
			],
			"deprecated": false
		},
		{
			"name": "plantimestamp",
			"description": "Returns a UTC timestamp for use in plan-time references.\n\n* Returns timestamp string that remains consistent during plan.\n* Useful for avoiding unnecessary resource updates.\n* Format is RFC 3339.",
			"parameters": [],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Plan-time timestamp string",
				"validation": {
					"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
				}
			},
			"examples": [
				"locals { plan_time = plantimestamp() }"
			],
			"deprecated": false
		},
		{
			"name": "sensitive",
			"description": "Marks a value as sensitive, preventing it from appearing in logs and output.\n\n* Wraps the given value and marks it as sensitive.\n* The value can still be used normally in expressions.\n* Terraform/OpenTofu will hide this value in logs and terminal output.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Value to mark as sensitive"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Value marked as sensitive"
			},
			"examples": [
				"locals { secret = sensitive(var.password) }"
			],
			"deprecated": false
		},
		{
			"name": "nonsensitive",
			"description": "Removes the sensitive marking from a value.\n\n* Unwraps a sensitive value, removing the sensitive marking.\n* Use with caution as it makes sensitive values visible.\n* Returns the value unchanged if it wasn't marked sensitive.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Sensitive value to unwrap"
				}
			],
			"returnType": {
				"types": [
					"string",
					"number",
					"boolean",
					"array",
					"object",
					"null"
				],
				"description": "Value with sensitive marking removed"
			},
			"examples": [
				"locals { visible = nonsensitive(var.sensitive_value) }"
			],
			"deprecated": false
		},
		{
			"name": "issensitive",
			"description": "Checks whether a value is marked as sensitive.\n\n* Returns true if the value is marked as sensitive.\n* Returns false for regular values.\n* Useful for conditional logic based on value sensitivity.",
			"parameters": [
				{
					"name": "value",
					"types": [
						"string",
						"number",
						"boolean",
						"array",
						"object",
						"null"
					],
					"required": true,
					"description": "Value to check for sensitive marking"
				}
			],
			"returnType": {
				"types": [
					"boolean"
				],
				"description": "True if value is sensitive"
			},
			"examples": [
				"locals { is_secret = issensitive(var.value) }"
			],
			"deprecated": false
		},
		{
			"name": "templatefile",
			"description": "Reads the contents of a template file and renders it with the given variables.\n\n* Reads and interpolates a template file.\n* Supports ${...} syntax for variable interpolation.\n* Variables are provided as a map of values.",
			"parameters": [
				{
					"name": "path",
					"types": [
						"string"
					],
					"required": true,
					"description": "Path to template file",
					"validation": {
						"pattern": "^[^<>:;,?\"*|]+$"
					}
				},
				{
					"name": "vars",
					"types": [
						"object"
					],
					"required": true,
					"description": "Map of variables to use in template"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Rendered template content"
			},
			"examples": [
				"locals { rendered = templatefile(\"${path.module}/template.tpl\", { name = \"value\" }) }"
			],
			"deprecated": false
		},
		{
			"name": "templatestring",
			"description": "Renders a template string with the given variables.\n\n* Like templatefile but works with an inline template string.\n* Supports ${...} syntax for variable interpolation.\n* Variables are provided as a map of values.",
			"parameters": [
				{
					"name": "template",
					"types": [
						"string"
					],
					"required": true,
					"description": "Template string to render",
					"validation": {
						"pattern": ".*\\$\\{.*\\}.*"
					}
				},
				{
					"name": "vars",
					"types": [
						"object"
					],
					"required": true,
					"description": "Map of variables to use in template"
				}
			],
			"returnType": {
				"types": [
					"string"
				],
				"description": "Rendered template string"
			},
			"examples": [
				"locals { rendered = templatestring(\"Hello, ${name}!\", { name = \"World\" }) }"
			],
			"deprecated": false
		}
	]
}